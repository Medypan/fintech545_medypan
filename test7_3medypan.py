# -*- coding: utf-8 -*-
"""test7.3medypan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FjomW7PMhtTDH_Iih27sB2qKP47Rc9b5
"""

import numpy as np
import pandas as pd
from scipy.optimize import minimize
from scipy.stats import t as student_t

# Read data file
df = pd.read_csv("test7_3.csv")
y = df["y"].to_numpy(dtype=float)
Xraw = df.drop(columns=["y"]).to_numpy(dtype=float)

# The matrix with constant intercept
X = np.column_stack([np.ones(len(y)), Xraw])
n, p = X.shape

# Student-t regression
# Find beta, sigma and nu
beta0, *_ = np.linalg.lstsq(X, y, rcond=None)
resid0 = y - X @ beta0
sigma0 = float(np.std(resid0)) if np.std(resid0) > 0 else float(np.std(y) or 1.0)
nu0 = 10.0  # degree of freedom

# The negative log likelyhood
def nll(theta):
    beta = theta[:p]
    log_sigma = theta[p]
    log_nu_minus_2 = theta[p + 1]
    sigma = np.exp(log_sigma)
    nu = np.exp(log_nu_minus_2) + 2.0
    mu = X @ beta
    return -np.sum(student_t.logpdf(y, df=nu, loc=mu, scale=sigma))

x0 = np.concatenate([beta0, [np.log(sigma0), np.log(nu0 - 2.0)]])
opt = minimize(nll, x0, method="L-BFGS-B")
theta_hat = opt.x

beta_hat = theta_hat[:p]
sigma_hat = float(np.exp(theta_hat[p]))
nu_hat = float(np.exp(theta_hat[p + 1]) + 2.0)

# The error for residual is 0 in regression constuction
mu_hat_error = 0.0

out = {
    "mu":   [mu_hat_error],
    "sigma":[sigma_hat],
    "nu":   [nu_hat],
    "Alpha":[beta_hat[0]],  # intercept
    "B1":   [beta_hat[1]],  # coefficient for x1
    "B2":   [beta_hat[2]],  # coefficient for x2
    "B3":   [beta_hat[3]],  # coefficient for x3
}
out_df = pd.DataFrame(out)
out_df.to_csv("testout7_3medypan.csv", index=False, float_format="%.12f")

print(out_df)


expected_cols = ["mu", "sigma", "nu", "Alpha", "B1", "B2", "B3"]
assert list(out_df.columns) == expected_cols
assert len(out_df) == 1

# Compare the results using 4 decimal places
def check_output_5dp(generated_file, reference_file, decimals=4):
    gen = pd.read_csv(generated_file)
    ref = pd.read_csv(reference_file)

    if list(gen.columns) != list(ref.columns):
        try:
            gen = gen[ref.columns]
        except KeyError:
            return "not correct"
    if gen.shape != ref.shape:
        return "not correct"

    A = ref.astype(float).round(decimals).to_numpy()
    B = gen.astype(float).round(decimals).to_numpy()
    return "correct" if np.array_equal(A, B) else "not correct"

print(check_output_5dp("testout7_3medypan.csv" , "testout7_3.csv", decimals=4))